Mappings I already know (at least pretty well)

i - insert before cursor
a - append after cursor
A - append at end of line
x - delete currently selected character
O - create new line above and insert
o - create new line below and insert
u - undo the last change
:w filename - write file
:q - quit vim
:wq filename - write file and quit vim
h - move to the left (right index finger)
t - move down (right middle finger)
n - move to the right (right ring finger)
c - move up (right middle finger moves up)
$ - move to the end of the current line


Mappings I am trying to learn


MOVEMENT MAPPINGS:

b - move to beginning of word
e - move to the end of a word (forms a pair with b)

^ - move to the beginning of the current line

f<char> - moves the cursor to the next occurance of character <char>


MOST IMPORTANT MOVEMENT MAPPINGS: 

/<pattern> 				- moves the cursor to the next occurance of patter
?<pattern> 				- moves the cursor to the previous " "
* 						- moves to next occurence of word underneath cursor
						- this can then be chained with <leader>n 
zz						- redraws vim with current line at center of screen

						-- TEXT REPLACEMENT -- 
:s/pattern1/pattern2 	- replaces pattern 1 with pattern 2 on current line
:%s/pattern1/pattern2 	- replaces all occurences of pattern 1 with pattern 2
<leader>cw				- replaces a word and puts you in insert mode
dw						- deletes from current character to end of word
daw						- deletes the word under the current cursor (it's great)
R						- enter replace mode
gR						- enter virtual replace mode (tabs ignored-ish)
r{char}					- replace a character under cursor with char


IN INSERT MODE:

<Ctrl-h>				- deletes back  a character
<Ctrl-w>				- deletes back a word
<Ctrl-u>				- deletes back a line
<Ctrl-o>				- enter normal mode for a single command
<Ctrl-k>				- enter digraph mode (greek letters and math!)
						- see  :digraphs 

FOR VISUAL MODE:

v						- enter visual mode
V						- enter line-based visual mode
<Ctrl-V>				- enter block visual mode
gv 						- reselect last visual selection
o						- go to other end of highlighted text
>						- indent with forward tabs
<						- indent with backward tabs
U						- convert to uppercase
r{char}					- replaces highlighted with character

Note: each of these commands works from within visual mode itself


TEXT MODIFICATION / OPERATORS
gU	- make uppercase
gu	- make lowercase

Tip: Repeating an operator twice performs the action on the current line. So to capitalize a line you would type gUgU. You can also create your own operators, which could let you comment out lines or blocks of code :DDD

COMMAND LINE MODE
====================

:5					- moves cursor to line number 5
:$					- moves cursor to end of file
:p					- print the current line
:3p					- print the third line
:2,5d				- deletes lines 2 to 5
:/word1/,/word2/:	- runs a command on the range specified by word1 and word2
:/w1/+1,/w1/-1		- runs a command on the range with an offset for each.
:%d					- deletes all lines
:[range]t{address}	- copies a set of lines to a new set of lines
:[range]m{address}	- moves lines in range to address
:[range]normal cmd	- execute normal mode commands on a range of lines (oh baby)
:sp filename 		- Splits the VIM window horizontally
:vs filename 		- Splits the VIM window vertically
:source ~/.vimrc 	- Updates the vimrc without closing vim
:digraph			- pulls up list of available digraphs


PRACTICAL VIM NOTES
========================

CHAPTER 5 COMMAND-LINE MODE
=============================
	* vi actually was derived from a text editor called "ex", and vim still retains its command-line mode.
	* ohhhh after you type : you are in command-line mode. Well that's easy, and that makes sense.
	* commands typed in command-line mode are called "ex commands"
	* We also enter command-line mode when we start the line with / to form a search expression
	* We can use it to do pattern and string matching, too, and that's how we read and write files, create new split windows, and interact with the "buffer"
	* It seems like ex commands are what you use in your vimrc to do programming and conditional replacement and shit.
	* Yup, this is what the nnoremap command actually is. It's an ex command.
	* ex commands can sometimes be faster than regular vim commands, and they can be executed across many lines at once.
	* Ranges take the form {start},{end} where the things in brackets are replaced with numbers and don't actually use brackets.
	* % has a special meaning: all lines in the current file, that's where %s comes from. % is just a range.
	* You can use visual mode to make a selection that ex commands can operate on. That's pretty neat.
	* I agree command mode is wonderfully powerful, but I'm not sure how much use I will be getting out of it. However, there is a relatively small set of powerful operators I would like to remember, including $, 0, 1
	* :t command is generally move efficient when copying a line to another destination
	* {} is for non-optional arguments and [] is for optional arguments in general. Neat.

Tip 30 - Run Normal Mode Commands Across a Range
--------------------------------------------------
	* Also the pragmatic programmer suggested I get really good at using vim, python, and python's plotting tools if nothing else, so this is a good idea if I am going to be doing any amount of programming. I can learn slowly, that's fine.
	* oh baby. Ohhhh oh baby. I really like ex mode now. Executing normal mode commands on a range of lines is fucking awesome
	* vim commands synergize with each other absurdly well
	* Combined with vim's . repeat command it's absurdly powerful. 
	* Wow that's really fucking nice. I can't believe I didn't know this.
	* If you want to know how to do this in visual mode, see page 50.
Tip 31 - Repeat the last Ex Command
-----------------------------------
	* @: can be used to repeat the last ex command
	* I'd really rather not mess with this at the moment cause there's no easy way to undo things.

Tip 32 - Tab-Complete Your Ex Commands
---------------------------------------
	* oh really? That would be hella nice.
	* Press <Ctrl-d> to see what options you have available for an ex command
	* Press tab to autocomplete the command and to cycle through the various options.
