USEFUL WILDCARDS
* Matches any characters
? Matches any single character
[characters] Matches any character that is a member of the set characters
[!characters] Matches any character that is not a member of the set characters
	[:alnum:] Alphanumeric characters
	[:alpha:] Alphabetic characters
	[:digit:] Numerals
	[:lower:] Matches any lowercase letter
	[:upper:] Matches any uppercase letter

	for example [[:alnum:]] matches any alphanumeric character


USEFUL COMMANDS
command -options --other-options arguments
	!15 - executes the command at history position 15 (the 15th command executed)
	Ctrl-c - interrupts a running process
	Ctrl-z - pauses (stops) a running process
	Ctrl-k - cuts the line from the cursor to end of line
	Ctrl-y - pastes the line in the "kill ring"
	Ctrl-a - jump to beginning of line
	Ctrl-e - jump to end of line
	Ctrl-r - interactive reverse history search (kinda cool but pretty unnecessary)
		Ctrl-j - copy the command and paste it into the shell
	Anything more complicated than that - use vim
	
	date - prints the current date
	cal - prints the calendar for the current month
	df - displays free space available on disk drives
	free - displays the amount of free memory
	exit - quits the shell and closes the emulator program
	cd - - yes include the extra dash. Moves to the previous working directory.
	file - Determine file type (ASCII text, UTF-8 text, etc.)
	less - view file contents. I prefer vim -M to open vim in readonly mode.
	cp files dir - copy files 
		-a archive: copy the permissions and ownership of files as well
		-i interactive: prompt before overwriting a file
		-r recursive: obv.
		-u update: only copy files that are newer or don't exist to the new location
		-v verbose: be explicit about what's happening
	mv files path - moves files or directories to the desired location
		-i interactive:
		-u update
		-v verbose
	rm files - deletes the selected files
		-i interactive: see a common theme here?
		-r recursive: delete all subdirectories recursively
		-f force: don't bitch at me. Just fucking do it.
		-v verbose: and give me a comprehensive report while you're at it.
	ls dir1 dir2 - apparently ls can list the contents of multiple directories at once
		-l long output (file size, date modified, permissions
		-a show hidden files
		-t sort the result by time modified
		--reverse reverses the order
		-S sort by file size (might be useful sometimes)
		-i show inode (unique memory address of each file)
	ln - create symbolic and hard links
	type - display the command's type that is about to be used
	which - displays the location of an executable.
	help - gives help for a shell builtin (there are only a few of these, such as cd)
	--help - running about any command with this directive will give options and use examples
	man - gives the manual of the executable you want to know about
		-k searches the entire set of manuals by search term
	info - similar to man, but also hyperlinked and provided from the GNU project
	whatis - gives an extremely brief description of the command
	alias - generates a new command out of a command sequence. For example, alias foo='cd /usr; ls;'
		- also with no arguments lists all the current system aliases.
	unalias - un-aliases a command created with alias
	sort - sorts plain text by alphanumeric order
	uniq - removes duplicates from a list
		-d shows only the duplicates
	wc - prints word count, line count, and character (byte) count of a file
		-l only report lines
	grep - grep pattern [file] prints the lines containing the pattern
		-i ignore case
		-v only print lines that do not match the pattern
	head/tail - these two commands print the top/bottom 10 lines
		-n 15 prints the top/bottom 15 lines
		-f monitors the file for changes and prints the new changes (very useful for installing shit)
	tee filename - OMG this lets us pipe standard output both to the command line and to a file. That's so nice.
	{} - Brace expansion echo {a,b,c} gives "a b c" (no whitespace allowed)
		{1..5} and {A..Z} expand as you would expect
	script - records the command session to a file
	chmod - change file permissions
	umask - show default bit masking of permissions to be removed
	su - login as a different user
		su jordan - login as jordan
		-l login and load that user's directory and shit.
	chown - changes the owner and group of a file
		chown bob:admins changes the owner to bob and the group to admins (one of bob's groups)
	passwd - change a users password
		[user] the optional user whose password we want to change
	ps - view running processes
		-x shows all processes
		-aux shows all processes that have ever run along with much more information
	top - view running process that are taking up the most of the CPU
	jobs - view the running jobs
	fg - move a job to the foreground
		%1 - move the 1st job to the foreground
	bg - moves a job to the background
		%1 moves the 1st job the background
	kill - kills a process of a specified number
		%1 kills the process with jobspec 1
		95 kills the process with PID 95
		-KILL actually kills the process, not nicely (sent to kernel directly). Use as a last resort
		-TERM asks the process to kill itself nicely. This is the default signal.
		-STOP suspends the process (sent to kernel)
		-l lists all the available signals
	cmd



CHAPTER 1 INTRODUCTION
------------------------------------------
	* GUIs make easy tasks easy, and command lines make difficult tasks possible.

CHAPTER 2 - WHAT IS THE SHELL?
------------------------------------------
	* The command line is actually referring to the *shell*, a program that takes keyboard commands and passes them to the operating system to carry out. Most Linux distros use bash.

CHAPTER 3 - NAVIGATION 
------------------------------------------
	* directories are ordered in a hierachical structure as in windows
	* unlike windows, storage devices are mounted after the root directory, not in parallel with it.
	* this book is really cool because it's styled like a tutorial and is very linear - that might help to explain its rather absurd popularity. Excellent pedagogy.
	* by default the home directory is the only directory the user is allowed to write files
	* Most of the system's programs are installed in /usr/bin
	* Linux has no concept of file extensions (or not really). You can name files however you like. However, some programs do actually use file extensions.

CHAPTER 4 - EXPLORING THE SYSTEM
------------------------------------------
	* Apparently ls can list the contents of more than one directory. That's pretty damn cool.
	* commands are specified with options and arguments
	* 'long options' are specified with --double-dashes and are verbose, 'short options' are specified by a single character and a single dash such as -a. Short options can be combined together like ls -la
	* in the access rights field, a dash means a normal file and a d means a directory.
	* A common idea in unix operating systems is that "everything is a file"
	* Plain text generally refers to ASCII text.
	* 'less' is actually a program, or a command line utility used to view text. I think opening vim in read-only mode would be better
	* In Linux, there are no secrets. It's kind of a beautiful idea if I'm being honest. I hope it gains more traction in the future.
	* /bin mostly contains system binaries 
	* /boot contains the linux kernel
	* /dev contains *device nodes*, or all the devices that are plugged into the system. Everything is a file, remember.
	* /etc contains all the system-wide configuration files, and a collection of startup shell scripts.
	* /media is generally used for mounting devices on newer linux systems, while /mnt is used on older ones.
	* /sbin contains system binaries that perform vital tasks.
	* /usr contains all the programs and support files used by regular users, and largely mirrors the root directory.
	* programs compiled from source and installed after the fact are generally located in /usr/local/bin/
	* symbolic link is synonymous with soft link
	* symbolic links are used heavily for referencing software that needs to be updated and versioned

CHAPTER 5 - MANIPULATING FILES AND DIRECTORIES
------------------------------------------
	* avoid using [a-z] but instead just use [:lower:]. Same with [A-Z] and [:upper:]
	* apparently wildcards work in the GUI
	* 'nautilus' is the file manager for GNOME
	* mkdir can create multiple directories at once
	* cp can actually be used to copy multiple files at once into a directory. This is different than the typical functionality you are accustomed to.
	* Be careful with rm. Once you delete a file, it's gone forever (unless you were using source control! hahahaha)
	* accidentally typing rm * will delete all the files in the current directory.
	* Unix has the concept of hard links and symbolic links. Hard links cannot reference directories, and cannot reference files outside our current filesystem.
	* Hard links are indistinguishable from the file itself, it's a clone of the file. You can modify any of the hard links and they will all be updated.
	* Symbolic links are basically the same thing as windows shortcuts. Broken symbolic links are displayed in red with ls
	* Symbolic links will actually fuck up if you have two hard links in different locations of the same filename. They will be assigned to the one that's in the current directory lol.
	* Symbolic links can be made with absolute or relative pathnames, and these are maintained as the directories are moved around (so relative pathnames tend to be more robust, and they are *actually* different
	* File operations on the link are generally carried out on the underlying file itself.

CHAPTER 6 - WORKING WITH COMMANDS
------------------------------------------
	* What is a command really? Well, apparently it can be different things. Some are executable programs, or binaries. Some are commands built into the shell itself called "shell builtins". Some are shell functions, or miniature scripts, and some are aliases. We can figure out which is which.
	* type displays the command type 
	* which displays an executable's location
	* The 'which' command exists both to find location and to figure out which executable is actually being executed, because on large systems there may be more than one.
	* Square brackets indicate optional items, and vertical bars indicated mutually exclusive items.
	* Formal documentation for programs is contained in the "man" page of the program, and can be accessed with the "man" command.
	* Man pages generally contain a title, synopsis, description, and the options available. They generally don't include examples and are not intended as a tutorial, but a reference.
	* You can display a nextremely terse explanation of a command with "whatis"
	* We can create our own commands using 'alias'
	* commands can be separated on the same line with semicolons like so:
		command1; command2; command3; ...
	* alias foo='command text' can generate a new command with the name foo
	
CHAPTER 7 - REDIRECTION
------------------------------------------
	* I/O redirection is probably the coolest feature of the command line, and only poorly understood by myself.
	* the 'standard output' or *stdout* is actually considered a file, albiet a special one. The status messages go to another file called *standard error* or *stderr*. By default these are both sent to the screen and not to an actual file.
	* standard input, or *stdin* is by default attached to the keyboard
	* Apparently we can redirect the input, output, and error as we wish.
	* Redirecting standard output can be done using ">", or the redirection operator
	* Error messages are not sent to the standard output, they are sent to the standard error.
	* The redirection operator > always overwrites the file in question from the beginning
	* > test_file can actually just overwrite test_file with nothing, which is cool.
	* The >> redirection operator appends to a file instead of overwriting it from the beginning
	* Standard error is file descriptor number 2 using 2>
	* you can redirect both standard error and standard output using > file 2> err_file after the command
	* Redirecting both standard error and standard output to a single file you use &>. Otherwise you need to do > filename 2>&1
	* we can silence a command by redirecting the standard error to the "null file", which serves as a black hole for bits. just 2> /dev/null
	* /dev/null is called a "bit bucket" because it's literally just a bucket that holds bits.
	* cat reads a file and sends it to the standard output
	* this command is typically used for short source files (for obvious reasons)
	* it can be used on non-text file types as well, which can then be redirected to new files. 
	* if cat is not given any arguments, it reads from the standard input.
	* Ctrl-D gives an end-of-file signal to bash utilities
	* cat can basically be used as the world's dumbest word processor.
	* cat < filename is the same as cat filename, and it redirects the standard input to the filename
	* the pipe operator | sends standard output of one command to the standard input of the next command
	* The pipe operator is used specifically for *commands*, not files
	* There's clearly a difference between pipes and redirection operators
	Filters 
	-----------
		* ls /bin /usr/bin | sort - this is considered a "filter" because it takes the output of one command and filters it into a specified order.
	Uniq 
	----------
		* removes duplicates from a list
	Grep
	--------
		* ohhh baby here we go.
		* grep is a *program*
		* oh cool this book teaches regular expressions!

CHAPTER 8 SEEING THE WORLD AS THE SHELL SEES IT
------------------------------------------
	* What *actually* happens when you push a key on the command line?
	* The shell performs "expansion" on things like wildcards before executing
	* By default the wildcard does not expand to include hidden files
	* The Tilde ~ is expanded to the home directory
	* You can also say ~username to go to the same place, so ~jordan is the same as ~
	* LOL the shell can do (integer) arithmetic. That's annoying.
	* "Brace expansion" is a thing that lets you create a few text strings (although I'm not sure how important this is given I can call python from the shell)
	* They are rly weird but you can nest them so it's coo.
	* Brace expansions are super duper useful for file and directory creation
	* They can be put in any expression which is pretty fawkin nice.
	* There's this thing called "parameter expansion", where parameters appear to be variables the shell has access to and they seem to all start with a $ sign
	* Command substitution is pretty fcking weird.
	* Quoting can be used for echo and apparently for other commands too.
	* Inside double quotes, all shell special characters lose their meaning (except a few). So the wildcard no longer works for example.
	* ahhhhh double quotes are how we deal with filenames that have a space.
	* By default the shell uses tabs, newlines, and spaces as *delimeters*, not as actual information
	* Single quotes suppress *all* expansions
	* The backslash is the "escape character", and serves the same purpose as quotation in the shell. That's neat. And it makes things make so much more sense.
	* The escape character originated in C and was adopted by the shell and now basically every language I know. Yay ^^.
	* Good, this book will actually use the concepts

CHAPTER 9 - ADVANCED KEYBOARD TRICKS
------------------------------------------
	* What, other than Ctrl-D and Ctrl-C? 
	* Well, Ctrl-a moves to the beginning of line, and Ctrl-e to the end of line. Ctrl-f moves forward one word and Ctrl-b moves backward one word.
	* I don't think most of these are necessary and I'll remap them to vim shortcuts.
	* Cutting and pasting is a much more violent "killing and yanking" with Ctrl-k and Ctrl-y
	* The shell features completion, which I already know
	* I use tab completion so much it's not even funny.

CHAPTER 9 - PERMISSIONS
------------------------------------------
	* Ah yes, not being able to execute a file. Don't you just love that?
	* Permissions are from the days when multiple users used a single computer. Except on servers that's now a little dated.
	* users may "own" files and directories, and the owner has complete control over its access. Users can also belong to a *group* that have access determined to directories and files by their owners.
	* "The world" is the unix term for "everybody" in terms of permissions
	* The file attributes are the 10 characters to the left when executing ls -l
		* - means regular file 
		* l means symbolic link
		* d means directory
	* Permissions in the file attributes go like -owner- -group- -world-
	* chmod can actually use octal numbers to set file permissions. So chmod 777 my_file gives rwx permissions to everyone
		* 600 gives rw permissions only to the owner
		* 755 gives rwx permissions to the owner and rx permissions to everyone else. 
		* x has a value of 1, w has a value of 2, and r has a value of 4.
		* octal notation is sufficient for chmod, no need to memorize anything more.
		* a recursive chmod acts on files and directories
	* umask shows the default bitmask to remove from file permissions (typically 0002, meaning that everyone can't write to the file)
		* this doesn't typically need to be controlled, but if you need more security it may be important.
	* There is actually a fourth digit for file permissions that can be used (in octal notation if you wish) that sets the *effective permissions* for anyone using that file. Neat. So basically we can make people the superuser that aren't actually the superuser, if the superuser set those permissions and created that file.
	* 'su' can actually be used to change to *any* user, not just the superuser
		* su stands for substitute user, and can also be used to execute a single command
	* 'sudo' can also be used to execute commands from users that are not the superuser.
		* it's neat because users can be added to a sudoers file and only need their password to execute commands that require the privileges of other users.
	* apparently giving superuser privileges only when needed makes linux inherently more secure than Windows, because the programs a user installs don't have administrator privileges by default.
	* you can change the owner and group of a file if you so desire
	* I don't think I'm ever going to be much bothered with multiple users, if I do I'll pick this book up again.
	* we can change someone's password with the 'passwd' command. 

CHAPTER 11 - PROCESSES
------------------------------------------
	* Processes are how computers give the illusion that they are multitasking
	* daemons are programs that sit in the background and do their thing without a UI
	* on system start up, the kernel launches a program called *init* in addition to its own processes.
	* programs that launch other programs are *parent* processes, while the programs they launch are their *child process*
	* each process has a number, or process ID, which are assigned in ascending order.
	* processes have owners and user IDs associated with them, just like files
	* processes can (naturally) be viewed from the command line
	* "tty" is short for teletype and refers to the controlling terminal for the process.
	* "stat" is the state the process is in. Capital S is for sleeping. It's waiting for an event to happen, such as a keystroke
		* R is for running
	* the process with PID 1 is the init process
	* the X window system is the UI engine of linux.
	* Ctrl-c interrupts a running program
		* apparently not all processes can be interrupted this way 0.0
	* There is apparently a distinction between *jobs* and *processes*
	* It seems like 'jobs' keeps track of the jobs the user actually started from the terminal
	* Moving a process from the foreground to the background with Ctrl-z -> bg is quite useful if you forget to run it with & and you want access to your shell again without killing the program.
	* You can kill a process with 'kill' command 
		* Although technically this doesn't actually kill the process, it just asks the process nicely to shut itself down by sending it a *signal*
		* Ctrl-c and Ctrl-z are actually themselves *signals*
		* Makes sense that not all processes can be killed with Ctrl-C because not all processes are actively listening for the INT signal
		* you can, however, choose to actually kill the program by specifying the signal KILL
		* programs can choose to ignore signals, but not KILL. This is never actually sent to the program, but to the kernel. Should only be used as a last resort, as it doesn't give the process a chance to clean up after itself, removing .swp files and whatnot.
	* you must be the owner of a process or the superuser to kill it.

PART 3 CONFIGURATION AND THE ENVIRONMENT
===========================================

CHAPTER 12 - THE ENVIRONMENT
--------------------------------
	* The shell maintains a body of information during its session called the "environment"
	* The 'environment' basically just contains all your variables, aliases, and shell functions.
	* on login (and on a shell startin) it reads a set of configuration scripts called startup files.
	* there are different startup files for logging in versus starting a terminal from the UI
	* the ~/.bashrc is the most important startup file, just like the ~/.vimrc
	* most login shells also read from the user's bashrc file
